/* tslint:disable */
/* eslint-disable */
/**
 * PriceList Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ListPriceListsRequestFilter
 */
export interface ListPriceListsRequestFilter {
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsRequestFilter
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsRequestFilter
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsRequestFilter
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsRequestFilter
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsRequestFilter
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {PricelistCurrencyFilter}
     * @memberof ListPriceListsRequestFilter
     */
    'currencyFilter'?: PricelistCurrencyFilter;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsRequestFilter
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsRequestFilter
     */
    'deliveredDutyPaid'?: boolean;
    /**
     * 
     * @type {PricelistSegmentFilter}
     * @memberof ListPriceListsRequestFilter
     */
    'segmentsFilter'?: PricelistSegmentFilter;
    /**
     * 
     * @type {PricelistMarketFilter}
     * @memberof ListPriceListsRequestFilter
     */
    'marketsFilter'?: PricelistMarketFilter;
    /**
     * 
     * @type {PricelistChannelFilter}
     * @memberof ListPriceListsRequestFilter
     */
    'channelsFilter'?: PricelistChannelFilter;
    /**
     * 
     * @type {PricelistPriceListTypeFilter}
     * @memberof ListPriceListsRequestFilter
     */
    'typeFilter'?: PricelistPriceListTypeFilter;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsRequestFilter
     */
    'isSystem'?: boolean;
}
/**
 * 
 * @export
 * @interface ListPriceListsResponsePriceList
 */
export interface ListPriceListsResponsePriceList {
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsResponsePriceList
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsResponsePriceList
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsResponsePriceList
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsResponsePriceList
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsResponsePriceList
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsResponsePriceList
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsResponsePriceList
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof ListPriceListsResponsePriceList
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsResponsePriceList
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsResponsePriceList
     */
    'deliveredDutyPaid'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListPriceListsResponsePriceList
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListPriceListsResponsePriceList
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListPriceListsResponsePriceList
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsResponsePriceList
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListPriceListsResponsePriceList
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {PricelistPriceListType}
     * @memberof ListPriceListsResponsePriceList
     */
    'type'?: PricelistPriceListType;
    /**
     * 
     * @type {boolean}
     * @memberof ListPriceListsResponsePriceList
     */
    'isSystem'?: boolean;
}


/**
 * 
 * @export
 * @interface PricelistChannelFilter
 */
export interface PricelistChannelFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistChannelFilter
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {PricelistFilterCondition}
     * @memberof PricelistChannelFilter
     */
    'condition'?: PricelistFilterCondition;
}


/**
 * 
 * @export
 * @interface PricelistCreatePriceListRequest
 */
export interface PricelistCreatePriceListRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistCreatePriceListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistCreatePriceListRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistCreatePriceListRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistCreatePriceListRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistCreatePriceListRequest
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistCreatePriceListRequest
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistCreatePriceListRequest
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistCreatePriceListRequest
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistCreatePriceListRequest
     */
    'deliveredDutyPaid'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistCreatePriceListRequest
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistCreatePriceListRequest
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistCreatePriceListRequest
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {PricelistPriceListType}
     * @memberof PricelistCreatePriceListRequest
     */
    'type'?: PricelistPriceListType;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistCreatePriceListRequest
     */
    'isSystem'?: boolean;
}


/**
 * 
 * @export
 * @interface PricelistCreatePriceListResponse
 */
export interface PricelistCreatePriceListResponse {
    /**
     * 
     * @type {string}
     * @memberof PricelistCreatePriceListResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistCreatePriceListResponse
     */
    'grn'?: string;
}
/**
 * Stands for Albania, not all ;-)
 * @export
 * @enum {string}
 */

export const PricelistCurrency = {
    Xxx: 'XXX',
    All: 'ALL',
    Dzd: 'DZD',
    Ars: 'ARS',
    Aud: 'AUD',
    Bsd: 'BSD',
    Bhd: 'BHD',
    Bdt: 'BDT',
    Amd: 'AMD',
    Bbd: 'BBD',
    Bmd: 'BMD',
    Btn: 'BTN',
    Bob: 'BOB',
    Bwp: 'BWP',
    Bzd: 'BZD',
    Sbd: 'SBD',
    Bnd: 'BND',
    Mmk: 'MMK',
    Bif: 'BIF',
    Khr: 'KHR',
    Cad: 'CAD',
    Cve: 'CVE',
    Kyd: 'KYD',
    Lkr: 'LKR',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Kmf: 'KMF',
    Crc: 'CRC',
    Hrk: 'HRK',
    Cup: 'CUP',
    Czk: 'CZK',
    Dkk: 'DKK',
    Dop: 'DOP',
    Svc: 'SVC',
    Etb: 'ETB',
    Ern: 'ERN',
    Fkp: 'FKP',
    Fjd: 'FJD',
    Djf: 'DJF',
    Gmd: 'GMD',
    Gip: 'GIP',
    Gtq: 'GTQ',
    Gnf: 'GNF',
    Gyd: 'GYD',
    Htg: 'HTG',
    Hnl: 'HNL',
    Hkd: 'HKD',
    Huf: 'HUF',
    Isk: 'ISK',
    Inr: 'INR',
    Idr: 'IDR',
    Irr: 'IRR',
    Iqd: 'IQD',
    Ils: 'ILS',
    Jmd: 'JMD',
    Jpy: 'JPY',
    Kzt: 'KZT',
    Jod: 'JOD',
    Kes: 'KES',
    Kpw: 'KPW',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kgs: 'KGS',
    Lak: 'LAK',
    Lbp: 'LBP',
    Lsl: 'LSL',
    Lrd: 'LRD',
    Lyd: 'LYD',
    Ltl: 'LTL',
    Mop: 'MOP',
    Mwk: 'MWK',
    Myr: 'MYR',
    Mvr: 'MVR',
    Mro: 'MRO',
    Mur: 'MUR',
    Mxn: 'MXN',
    Mnt: 'MNT',
    Mdl: 'MDL',
    Mad: 'MAD',
    Omr: 'OMR',
    Nad: 'NAD',
    Npr: 'NPR',
    Ang: 'ANG',
    Awg: 'AWG',
    Vuv: 'VUV',
    Nzd: 'NZD',
    Nio: 'NIO',
    Ngn: 'NGN',
    Nok: 'NOK',
    Pkr: 'PKR',
    Pab: 'PAB',
    Pgk: 'PGK',
    Pyg: 'PYG',
    Pen: 'PEN',
    Php: 'PHP',
    Qar: 'QAR',
    Rub: 'RUB',
    Rwf: 'RWF',
    Shp: 'SHP',
    Std: 'STD',
    Sar: 'SAR',
    Scr: 'SCR',
    Sll: 'SLL',
    Sgd: 'SGD',
    Vnd: 'VND',
    Sos: 'SOS',
    Zar: 'ZAR',
    Ssp: 'SSP',
    Szl: 'SZL',
    Sek: 'SEK',
    Chf: 'CHF',
    Syp: 'SYP',
    Thb: 'THB',
    Top: 'TOP',
    Ttd: 'TTD',
    Aed: 'AED',
    Tnd: 'TND',
    Ugx: 'UGX',
    Mkd: 'MKD',
    Egp: 'EGP',
    Gbp: 'GBP',
    Tzs: 'TZS',
    Usd: 'USD',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Wst: 'WST',
    Yer: 'YER',
    Twd: 'TWD',
    Cuc: 'CUC',
    Zwl: 'ZWL',
    Tmt: 'TMT',
    Ghs: 'GHS',
    Vef: 'VEF',
    Sdg: 'SDG',
    Uyi: 'UYI',
    Rsd: 'RSD',
    Mzn: 'MZN',
    Azn: 'AZN',
    Ron: 'RON',
    Che: 'CHE',
    Chw: 'CHW',
    Try: 'TRY',
    Xaf: 'XAF',
    Xcd: 'XCD',
    Xof: 'XOF',
    Xpf: 'XPF',
    Xba: 'XBA',
    Xbb: 'XBB',
    Xbc: 'XBC',
    Xbd: 'XBD',
    Xau: 'XAU',
    Xdr: 'XDR',
    Xag: 'XAG',
    Xpt: 'XPT',
    Xpd: 'XPD',
    Xua: 'XUA',
    Zmw: 'ZMW',
    Srd: 'SRD',
    Mga: 'MGA',
    Cou: 'COU',
    Afn: 'AFN',
    Tjs: 'TJS',
    Aoa: 'AOA',
    Byr: 'BYR',
    Bgn: 'BGN',
    Cdf: 'CDF',
    Bam: 'BAM',
    Eur: 'EUR',
    Mxv: 'MXV',
    Uah: 'UAH',
    Gel: 'GEL',
    Bov: 'BOV',
    Pln: 'PLN',
    Brl: 'BRL',
    Clf: 'CLF',
    Xsu: 'XSU',
    Usn: 'USN'
} as const;

export type PricelistCurrency = typeof PricelistCurrency[keyof typeof PricelistCurrency];


/**
 * 
 * @export
 * @interface PricelistCurrencyFilter
 */
export interface PricelistCurrencyFilter {
    /**
     * 
     * @type {Array<PricelistCurrency>}
     * @memberof PricelistCurrencyFilter
     */
    'currencies'?: Array<PricelistCurrency>;
    /**
     * 
     * @type {PricelistFilterCondition}
     * @memberof PricelistCurrencyFilter
     */
    'condition'?: PricelistFilterCondition;
}


/**
 * 
 * @export
 * @interface PricelistDeletePriceListItemsRequest
 */
export interface PricelistDeletePriceListItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistDeletePriceListItemsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistDeletePriceListItemsRequest
     */
    'id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistDeletePriceListItemsRequest
     */
    'itemsGrn'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PricelistFilterCondition = {
    In: 'IN',
    NotIn: 'NOT_IN'
} as const;

export type PricelistFilterCondition = typeof PricelistFilterCondition[keyof typeof PricelistFilterCondition];


/**
 * 
 * @export
 * @interface PricelistGetFullPriceItem
 */
export interface PricelistGetFullPriceItem {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItem
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItem
     */
    'itemGrn'?: string;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistGetFullPriceItem
     */
    'basePrice'?: PricelistMoney;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItem
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItem
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistGetFullPriceItem
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {Array<PricelistGetFullPriceItemPrice>}
     * @memberof PricelistGetFullPriceItem
     */
    'prices'?: Array<PricelistGetFullPriceItemPrice>;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetFullPriceItem
     */
    'hasTierPrices'?: boolean;
}


/**
 * 
 * @export
 * @interface PricelistGetFullPriceItemPrice
 */
export interface PricelistGetFullPriceItemPrice {
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistGetFullPriceItemPrice
     */
    'price'?: PricelistMoney;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetFullPriceItemPrice
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItemPrice
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItemPrice
     */
    'endAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof PricelistGetFullPriceItemPrice
     */
    'order'?: number;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistGetFullPriceItemPrice
     */
    'basePrice'?: PricelistMoney;
}
/**
 * 
 * @export
 * @interface PricelistGetFullPriceItemsRequest
 */
export interface PricelistGetFullPriceItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItemsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetFullPriceItemsRequest
     */
    'pricelistId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetFullPriceItemsRequest
     */
    'itemsGrn'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PricelistGetFullPriceItemsResponse
 */
export interface PricelistGetFullPriceItemsResponse {
    /**
     * 
     * @type {Array<PricelistGetFullPriceItem>}
     * @memberof PricelistGetFullPriceItemsResponse
     */
    'priceItems'?: Array<PricelistGetFullPriceItem>;
}
/**
 * 
 * @export
 * @interface PricelistGetPriceItem
 */
export interface PricelistGetPriceItem {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceItem
     */
    'itemGrn'?: string;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistGetPriceItem
     */
    'price'?: PricelistMoney;
    /**
     * 
     * @type {number}
     * @memberof PricelistGetPriceItem
     */
    'doubleFormatPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceItem
     */
    'endDatePrice'?: string;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistGetPriceItem
     */
    'basePrice'?: PricelistMoney;
    /**
     * 
     * @type {number}
     * @memberof PricelistGetPriceItem
     */
    'doubleFormatBasePrice'?: number;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistGetPriceItem
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceItem
     */
    'hasTierPrices'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceItem
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceItem
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface PricelistGetPriceItemsByPriceListItemIdsRequest
 */
export interface PricelistGetPriceItemsByPriceListItemIdsRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceItemsByPriceListItemIdsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPriceItemsByPriceListItemIdsRequest
     */
    'priceListItemId'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PricelistGetPriceItemsByPriceListItemIdsResponse
 */
export interface PricelistGetPriceItemsByPriceListItemIdsResponse {
    /**
     * 
     * @type {Array<PricelistGetPriceListItem>}
     * @memberof PricelistGetPriceItemsByPriceListItemIdsResponse
     */
    'prices'?: Array<PricelistGetPriceListItem>;
}
/**
 * 
 * @export
 * @interface PricelistGetPriceListByCodeRequest
 */
export interface PricelistGetPriceListByCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface PricelistGetPriceListByCodeResponse
 */
export interface PricelistGetPriceListByCodeResponse {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'deliveredDutyPaid'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {PricelistPriceListType}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'type'?: PricelistPriceListType;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListByCodeResponse
     */
    'isSystem'?: boolean;
}


/**
 * 
 * @export
 * @interface PricelistGetPriceListItem
 */
export interface PricelistGetPriceListItem {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItem
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItem
     */
    'itemGrn'?: string;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistGetPriceListItem
     */
    'price'?: PricelistMoney;
    /**
     * 
     * @type {number}
     * @memberof PricelistGetPriceListItem
     */
    'doubleFormatPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItem
     */
    'endDatePrice'?: string;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistGetPriceListItem
     */
    'basePrice'?: PricelistMoney;
    /**
     * 
     * @type {number}
     * @memberof PricelistGetPriceListItem
     */
    'doubleFormatBasePrice'?: number;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistGetPriceListItem
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListItem
     */
    'hasTierPrices'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItem
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItem
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface PricelistGetPriceListItemsRequest
 */
export interface PricelistGetPriceListItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItemsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItemsRequest
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof PricelistGetPriceListItemsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItemsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface PricelistGetPriceListItemsResponse
 */
export interface PricelistGetPriceListItemsResponse {
    /**
     * 
     * @type {Array<PricelistGetPriceListItem>}
     * @memberof PricelistGetPriceListItemsResponse
     */
    'items'?: Array<PricelistGetPriceListItem>;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListItemsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface PricelistGetPriceListRequest
 */
export interface PricelistGetPriceListRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PricelistGetPriceListResponse
 */
export interface PricelistGetPriceListResponse {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListResponse
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListResponse
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListResponse
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistGetPriceListResponse
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListResponse
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListResponse
     */
    'deliveredDutyPaid'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPriceListResponse
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPriceListResponse
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPriceListResponse
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPriceListResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {PricelistPriceListType}
     * @memberof PricelistGetPriceListResponse
     */
    'type'?: PricelistPriceListType;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistGetPriceListResponse
     */
    'isSystem'?: boolean;
}


/**
 * 
 * @export
 * @interface PricelistGetPricesRequest
 */
export interface PricelistGetPricesRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistGetPricesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistGetPricesRequest
     */
    'itemsGrn'?: Array<string>;
    /**
     * 
     * @type {PricelistPriceContext}
     * @memberof PricelistGetPricesRequest
     */
    'context'?: PricelistPriceContext;
}
/**
 * 
 * @export
 * @interface PricelistGetPricesResponse
 */
export interface PricelistGetPricesResponse {
    /**
     * 
     * @type {Array<PricelistGetPriceItem>}
     * @memberof PricelistGetPricesResponse
     */
    'prices'?: Array<PricelistGetPriceItem>;
}
/**
 * 
 * @export
 * @interface PricelistListFullPriceItemsRequest
 */
export interface PricelistListFullPriceItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistListFullPriceItemsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistListFullPriceItemsRequest
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof PricelistListFullPriceItemsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof PricelistListFullPriceItemsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface PricelistListFullPriceItemsResponse
 */
export interface PricelistListFullPriceItemsResponse {
    /**
     * 
     * @type {Array<PricelistGetFullPriceItem>}
     * @memberof PricelistListFullPriceItemsResponse
     */
    'items'?: Array<PricelistGetFullPriceItem>;
    /**
     * 
     * @type {string}
     * @memberof PricelistListFullPriceItemsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface PricelistListPriceListsRequest
 */
export interface PricelistListPriceListsRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistListPriceListsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PricelistListPriceListsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof PricelistListPriceListsRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistListPriceListsRequest
     */
    'searchQuery'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistListPriceListsRequest
     */
    'filterMask'?: string;
    /**
     * 
     * @type {ListPriceListsRequestFilter}
     * @memberof PricelistListPriceListsRequest
     */
    'filter'?: ListPriceListsRequestFilter;
}
/**
 * 
 * @export
 * @interface PricelistListPriceListsResponse
 */
export interface PricelistListPriceListsResponse {
    /**
     * 
     * @type {Array<ListPriceListsResponsePriceList>}
     * @memberof PricelistListPriceListsResponse
     */
    'pricelists'?: Array<ListPriceListsResponsePriceList>;
    /**
     * 
     * @type {string}
     * @memberof PricelistListPriceListsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface PricelistMarketFilter
 */
export interface PricelistMarketFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistMarketFilter
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {PricelistFilterCondition}
     * @memberof PricelistMarketFilter
     */
    'condition'?: PricelistFilterCondition;
}


/**
 * Represents an amount of money.
 * @export
 * @interface PricelistMoney
 */
export interface PricelistMoney {
    /**
     * The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.
     * @type {string}
     * @memberof PricelistMoney
     */
    'units'?: string;
    /**
     * Number of micro (10^-6) units of the amount. The value must be between -999,999 and +999,999 inclusive. If `units` is positive, `micros` must be positive or zero. If `units` is zero, `micros` can be positive, zero, or negative. If `units` is negative, `micros` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `micros`=-750,000.
     * @type {number}
     * @memberof PricelistMoney
     */
    'micros'?: number;
}
/**
 * 
 * @export
 * @interface PricelistPriceContext
 */
export interface PricelistPriceContext {
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistPriceContext
     */
    'currency': PricelistCurrency;
    /**
     * 
     * @type {string}
     * @memberof PricelistPriceContext
     */
    'segment'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistPriceContext
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PricelistPriceContext
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistPriceContext
     */
    'channel'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const PricelistPriceListType = {
    Unknown: 'UNKNOWN',
    Base: 'BASE',
    CatalogPromotion: 'CATALOG_PROMOTION'
} as const;

export type PricelistPriceListType = typeof PricelistPriceListType[keyof typeof PricelistPriceListType];


/**
 * 
 * @export
 * @interface PricelistPriceListTypeFilter
 */
export interface PricelistPriceListTypeFilter {
    /**
     * 
     * @type {Array<PricelistPriceListType>}
     * @memberof PricelistPriceListTypeFilter
     */
    'pricelistTypes'?: Array<PricelistPriceListType>;
    /**
     * 
     * @type {PricelistFilterCondition}
     * @memberof PricelistPriceListTypeFilter
     */
    'condition'?: PricelistFilterCondition;
}


/**
 * 
 * @export
 * @interface PricelistSegmentFilter
 */
export interface PricelistSegmentFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistSegmentFilter
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {PricelistFilterCondition}
     * @memberof PricelistSegmentFilter
     */
    'condition'?: PricelistFilterCondition;
}


/**
 * 
 * @export
 * @interface PricelistSetPriceListItem
 */
export interface PricelistSetPriceListItem {
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItem
     */
    'itemGrn'?: string;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistSetPriceListItem
     */
    'basePrice'?: PricelistMoney;
    /**
     * 
     * @type {Array<PricelistSetPriceListItemPrice>}
     * @memberof PricelistSetPriceListItem
     */
    'priceItems'?: Array<PricelistSetPriceListItemPrice>;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistSetPriceListItem
     */
    'hasTierPrices'?: boolean;
}
/**
 * 
 * @export
 * @interface PricelistSetPriceListItemError
 */
export interface PricelistSetPriceListItemError {
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItemError
     */
    'itemGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItemError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItemError
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PricelistSetPriceListItemPrice
 */
export interface PricelistSetPriceListItemPrice {
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistSetPriceListItemPrice
     */
    'price'?: PricelistMoney;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistSetPriceListItemPrice
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItemPrice
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItemPrice
     */
    'endAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof PricelistSetPriceListItemPrice
     */
    'order'?: number;
    /**
     * 
     * @type {PricelistMoney}
     * @memberof PricelistSetPriceListItemPrice
     */
    'basePrice'?: PricelistMoney;
}
/**
 * 
 * @export
 * @interface PricelistSetPriceListItemsRequest
 */
export interface PricelistSetPriceListItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItemsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistSetPriceListItemsRequest
     */
    'id'?: string;
    /**
     * 
     * @type {Array<PricelistSetPriceListItem>}
     * @memberof PricelistSetPriceListItemsRequest
     */
    'items'?: Array<PricelistSetPriceListItem>;
}
/**
 * 
 * @export
 * @interface PricelistSetPriceListItemsResponse
 */
export interface PricelistSetPriceListItemsResponse {
    /**
     * 
     * @type {PricelistSetPriceListItemError}
     * @memberof PricelistSetPriceListItemsResponse
     */
    'errors'?: PricelistSetPriceListItemError;
}
/**
 * 
 * @export
 * @interface PricelistUpdatePriceListRequest
 */
export interface PricelistUpdatePriceListRequest {
    /**
     * 
     * @type {string}
     * @memberof PricelistUpdatePriceListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistUpdatePriceListRequest
     */
    'id'?: string;
    /**
     * 
     * @type {PricelistUpdatePriceListRequestPayload}
     * @memberof PricelistUpdatePriceListRequest
     */
    'payload'?: PricelistUpdatePriceListRequestPayload;
    /**
     * 
     * @type {string}
     * @memberof PricelistUpdatePriceListRequest
     */
    'payloadMask'?: string;
}
/**
 * 
 * @export
 * @interface PricelistUpdatePriceListRequestPayload
 */
export interface PricelistUpdatePriceListRequestPayload {
    /**
     * 
     * @type {boolean}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {PricelistCurrency}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'currency'?: PricelistCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'deliveredDutyPaid'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {PricelistPriceListType}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'type'?: PricelistPriceListType;
    /**
     * 
     * @type {boolean}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'isSystem'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricelistUpdatePriceListRequestPayload
     */
    'description'?: string;
}


/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * PriceListApi - axios parameter creator
 * @export
 */
export const PriceListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows the creation of a new price list with specified details such as code, name, currency, and type.
         * @summary Create new list
         * @param {PricelistCreatePriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPriceList: async (body: PricelistCreatePriceListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPriceList', 'body', body)
            const localVarPath = `/pricelist.PriceList/CreatePriceList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes specified items from a price list based on their unique identifiers.
         * @summary Get prices for items
         * @param {PricelistDeletePriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePriceListItems: async (body: PricelistDeletePriceListItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deletePriceListItems', 'body', body)
            const localVarPath = `/pricelist.PriceList/DeletePriceListItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches detailed information about items, including historical price data, for a specific price list.
         * @summary List detailed items
         * @param {PricelistGetFullPriceItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullPriceItemsByPricelistId: async (body: PricelistGetFullPriceItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getFullPriceItemsByPricelistId', 'body', body)
            const localVarPath = `/pricelist.PriceList/GetFullPriceItemsByPricelistId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
         * @summary Get specific list
         * @param {PricelistGetPriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceList: async (body: PricelistGetPriceListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getPriceList', 'body', body)
            const localVarPath = `/pricelist.PriceList/GetPriceList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
         * @summary Get list by code
         * @param {PricelistGetPriceListByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceListByCode: async (body: PricelistGetPriceListByCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getPriceListByCode', 'body', body)
            const localVarPath = `/pricelist.PriceList/GetPriceListByCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a paginated list of items associated with a particular price list.
         * @summary Get items in list
         * @param {PricelistGetPriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceListItems: async (body: PricelistGetPriceListItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getPriceListItems', 'body', body)
            const localVarPath = `/pricelist.PriceList/GetPriceListItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the current prices of specified items considering the provided context, such as currency and market.
         * @summary Get detailed items
         * @param {PricelistGetPricesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricesItems: async (body: PricelistGetPricesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getPricesItems', 'body', body)
            const localVarPath = `/pricelist.PriceList/GetPricesItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
         * @summary List detailed price items for a specific price list
         * @param {PricelistListFullPriceItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFullPriceItemsByPricelistId: async (body: PricelistListFullPriceItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listFullPriceItemsByPricelistId', 'body', body)
            const localVarPath = `/pricelist.PriceList/ListFullPriceItemsByPricelistId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
         * @summary List all price lists
         * @param {PricelistListPriceListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPriceLists: async (body: PricelistListPriceListsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listPriceLists', 'body', body)
            const localVarPath = `/pricelist.PriceList/ListPriceLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PricelistGetPriceItemsByPriceListItemIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceListGetPriceItemsByPriceListItemIds: async (body: PricelistGetPriceItemsByPriceListItemIdsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('priceListGetPriceItemsByPriceListItemIds', 'body', body)
            const localVarPath = `/pricelist.PriceList/GetPriceItemsByPriceListItemIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates or creates items for a given price list, allowing bulk modifications.
         * @summary Set items in list
         * @param {PricelistSetPriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPriceListItems: async (body: PricelistSetPriceListItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setPriceListItems', 'body', body)
            const localVarPath = `/pricelist.PriceList/SetPriceListItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: `code,name,currency,type`
         * @summary Update list
         * @param {PricelistUpdatePriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePriceList: async (body: PricelistUpdatePriceListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePriceList', 'body', body)
            const localVarPath = `/pricelist.PriceList/UpdatePriceList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PriceListApi - functional programming interface
 * @export
 */
export const PriceListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PriceListApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows the creation of a new price list with specified details such as code, name, currency, and type.
         * @summary Create new list
         * @param {PricelistCreatePriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPriceList(body: PricelistCreatePriceListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistCreatePriceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPriceList(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.createPriceList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes specified items from a price list based on their unique identifiers.
         * @summary Get prices for items
         * @param {PricelistDeletePriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePriceListItems(body: PricelistDeletePriceListItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePriceListItems(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.deletePriceListItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches detailed information about items, including historical price data, for a specific price list.
         * @summary List detailed items
         * @param {PricelistGetFullPriceItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullPriceItemsByPricelistId(body: PricelistGetFullPriceItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistGetFullPriceItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullPriceItemsByPricelistId(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.getFullPriceItemsByPricelistId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
         * @summary Get specific list
         * @param {PricelistGetPriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPriceList(body: PricelistGetPriceListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistGetPriceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPriceList(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.getPriceList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
         * @summary Get list by code
         * @param {PricelistGetPriceListByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPriceListByCode(body: PricelistGetPriceListByCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistGetPriceListByCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPriceListByCode(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.getPriceListByCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a paginated list of items associated with a particular price list.
         * @summary Get items in list
         * @param {PricelistGetPriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPriceListItems(body: PricelistGetPriceListItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistGetPriceListItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPriceListItems(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.getPriceListItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the current prices of specified items considering the provided context, such as currency and market.
         * @summary Get detailed items
         * @param {PricelistGetPricesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricesItems(body: PricelistGetPricesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistGetPricesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricesItems(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.getPricesItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
         * @summary List detailed price items for a specific price list
         * @param {PricelistListFullPriceItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFullPriceItemsByPricelistId(body: PricelistListFullPriceItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistListFullPriceItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFullPriceItemsByPricelistId(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.listFullPriceItemsByPricelistId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
         * @summary List all price lists
         * @param {PricelistListPriceListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPriceLists(body: PricelistListPriceListsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistListPriceListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPriceLists(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.listPriceLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PricelistGetPriceItemsByPriceListItemIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async priceListGetPriceItemsByPriceListItemIds(body: PricelistGetPriceItemsByPriceListItemIdsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistGetPriceItemsByPriceListItemIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.priceListGetPriceItemsByPriceListItemIds(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.priceListGetPriceItemsByPriceListItemIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates or creates items for a given price list, allowing bulk modifications.
         * @summary Set items in list
         * @param {PricelistSetPriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPriceListItems(body: PricelistSetPriceListItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricelistSetPriceListItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPriceListItems(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.setPriceListItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: `code,name,currency,type`
         * @summary Update list
         * @param {PricelistUpdatePriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePriceList(body: PricelistUpdatePriceListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePriceList(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListApi.updatePriceList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PriceListApi - factory interface
 * @export
 */
export const PriceListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PriceListApiFp(configuration)
    return {
        /**
         * Allows the creation of a new price list with specified details such as code, name, currency, and type.
         * @summary Create new list
         * @param {PricelistCreatePriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPriceList(body: PricelistCreatePriceListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistCreatePriceListResponse> {
            return localVarFp.createPriceList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes specified items from a price list based on their unique identifiers.
         * @summary Get prices for items
         * @param {PricelistDeletePriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePriceListItems(body: PricelistDeletePriceListItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deletePriceListItems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches detailed information about items, including historical price data, for a specific price list.
         * @summary List detailed items
         * @param {PricelistGetFullPriceItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullPriceItemsByPricelistId(body: PricelistGetFullPriceItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistGetFullPriceItemsResponse> {
            return localVarFp.getFullPriceItemsByPricelistId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
         * @summary Get specific list
         * @param {PricelistGetPriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceList(body: PricelistGetPriceListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistGetPriceListResponse> {
            return localVarFp.getPriceList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
         * @summary Get list by code
         * @param {PricelistGetPriceListByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceListByCode(body: PricelistGetPriceListByCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistGetPriceListByCodeResponse> {
            return localVarFp.getPriceListByCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a paginated list of items associated with a particular price list.
         * @summary Get items in list
         * @param {PricelistGetPriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceListItems(body: PricelistGetPriceListItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistGetPriceListItemsResponse> {
            return localVarFp.getPriceListItems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the current prices of specified items considering the provided context, such as currency and market.
         * @summary Get detailed items
         * @param {PricelistGetPricesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricesItems(body: PricelistGetPricesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistGetPricesResponse> {
            return localVarFp.getPricesItems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
         * @summary List detailed price items for a specific price list
         * @param {PricelistListFullPriceItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFullPriceItemsByPricelistId(body: PricelistListFullPriceItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistListFullPriceItemsResponse> {
            return localVarFp.listFullPriceItemsByPricelistId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
         * @summary List all price lists
         * @param {PricelistListPriceListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPriceLists(body: PricelistListPriceListsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistListPriceListsResponse> {
            return localVarFp.listPriceLists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PricelistGetPriceItemsByPriceListItemIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceListGetPriceItemsByPriceListItemIds(body: PricelistGetPriceItemsByPriceListItemIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistGetPriceItemsByPriceListItemIdsResponse> {
            return localVarFp.priceListGetPriceItemsByPriceListItemIds(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates or creates items for a given price list, allowing bulk modifications.
         * @summary Set items in list
         * @param {PricelistSetPriceListItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPriceListItems(body: PricelistSetPriceListItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PricelistSetPriceListItemsResponse> {
            return localVarFp.setPriceListItems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: `code,name,currency,type`
         * @summary Update list
         * @param {PricelistUpdatePriceListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePriceList(body: PricelistUpdatePriceListRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updatePriceList(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PriceListApi - object-oriented interface
 * @export
 * @class PriceListApi
 * @extends {BaseAPI}
 */
export class PriceListApi extends BaseAPI {
    /**
     * Allows the creation of a new price list with specified details such as code, name, currency, and type.
     * @summary Create new list
     * @param {PricelistCreatePriceListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public createPriceList(body: PricelistCreatePriceListRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).createPriceList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes specified items from a price list based on their unique identifiers.
     * @summary Get prices for items
     * @param {PricelistDeletePriceListItemsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public deletePriceListItems(body: PricelistDeletePriceListItemsRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).deletePriceListItems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches detailed information about items, including historical price data, for a specific price list.
     * @summary List detailed items
     * @param {PricelistGetFullPriceItemsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public getFullPriceItemsByPricelistId(body: PricelistGetFullPriceItemsRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).getFullPriceItemsByPricelistId(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
     * @summary Get specific list
     * @param {PricelistGetPriceListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public getPriceList(body: PricelistGetPriceListRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).getPriceList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
     * @summary Get list by code
     * @param {PricelistGetPriceListByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public getPriceListByCode(body: PricelistGetPriceListByCodeRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).getPriceListByCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a paginated list of items associated with a particular price list.
     * @summary Get items in list
     * @param {PricelistGetPriceListItemsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public getPriceListItems(body: PricelistGetPriceListItemsRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).getPriceListItems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the current prices of specified items considering the provided context, such as currency and market.
     * @summary Get detailed items
     * @param {PricelistGetPricesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public getPricesItems(body: PricelistGetPricesRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).getPricesItems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
     * @summary List detailed price items for a specific price list
     * @param {PricelistListFullPriceItemsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public listFullPriceItemsByPricelistId(body: PricelistListFullPriceItemsRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).listFullPriceItemsByPricelistId(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
     * @summary List all price lists
     * @param {PricelistListPriceListsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public listPriceLists(body: PricelistListPriceListsRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).listPriceLists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PricelistGetPriceItemsByPriceListItemIdsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public priceListGetPriceItemsByPriceListItemIds(body: PricelistGetPriceItemsByPriceListItemIdsRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).priceListGetPriceItemsByPriceListItemIds(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates or creates items for a given price list, allowing bulk modifications.
     * @summary Set items in list
     * @param {PricelistSetPriceListItemsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public setPriceListItems(body: PricelistSetPriceListItemsRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).setPriceListItems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: `code,name,currency,type`
     * @summary Update list
     * @param {PricelistUpdatePriceListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListApi
     */
    public updatePriceList(body: PricelistUpdatePriceListRequest, options?: RawAxiosRequestConfig) {
        return PriceListApiFp(this.configuration).updatePriceList(body, options).then((request) => request(this.axios, this.basePath));
    }
}



