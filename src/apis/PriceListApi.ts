/* tslint:disable */
/* eslint-disable */
/**
 * PriceList Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PricelistCreatePriceListRequest,
  PricelistCreatePriceListResponse,
  PricelistDeletePriceListItemsRequest,
  PricelistGetFullPriceItemsRequest,
  PricelistGetFullPriceItemsResponse,
  PricelistGetPriceItemsByPriceListItemIdsRequest,
  PricelistGetPriceItemsByPriceListItemIdsResponse,
  PricelistGetPriceListByCodeRequest,
  PricelistGetPriceListByCodeResponse,
  PricelistGetPriceListItemsRequest,
  PricelistGetPriceListItemsResponse,
  PricelistGetPriceListRequest,
  PricelistGetPriceListResponse,
  PricelistGetPricesRequest,
  PricelistGetPricesResponse,
  PricelistListFullPriceItemsRequest,
  PricelistListFullPriceItemsResponse,
  PricelistListPriceListsRequest,
  PricelistListPriceListsResponse,
  PricelistSetPriceListItemsRequest,
  PricelistSetPriceListItemsResponse,
  PricelistUpdatePriceListRequest,
  RpcStatus,
} from '../models/index';
import {
    PricelistCreatePriceListRequestFromJSON,
    PricelistCreatePriceListRequestToJSON,
    PricelistCreatePriceListResponseFromJSON,
    PricelistCreatePriceListResponseToJSON,
    PricelistDeletePriceListItemsRequestFromJSON,
    PricelistDeletePriceListItemsRequestToJSON,
    PricelistGetFullPriceItemsRequestFromJSON,
    PricelistGetFullPriceItemsRequestToJSON,
    PricelistGetFullPriceItemsResponseFromJSON,
    PricelistGetFullPriceItemsResponseToJSON,
    PricelistGetPriceItemsByPriceListItemIdsRequestFromJSON,
    PricelistGetPriceItemsByPriceListItemIdsRequestToJSON,
    PricelistGetPriceItemsByPriceListItemIdsResponseFromJSON,
    PricelistGetPriceItemsByPriceListItemIdsResponseToJSON,
    PricelistGetPriceListByCodeRequestFromJSON,
    PricelistGetPriceListByCodeRequestToJSON,
    PricelistGetPriceListByCodeResponseFromJSON,
    PricelistGetPriceListByCodeResponseToJSON,
    PricelistGetPriceListItemsRequestFromJSON,
    PricelistGetPriceListItemsRequestToJSON,
    PricelistGetPriceListItemsResponseFromJSON,
    PricelistGetPriceListItemsResponseToJSON,
    PricelistGetPriceListRequestFromJSON,
    PricelistGetPriceListRequestToJSON,
    PricelistGetPriceListResponseFromJSON,
    PricelistGetPriceListResponseToJSON,
    PricelistGetPricesRequestFromJSON,
    PricelistGetPricesRequestToJSON,
    PricelistGetPricesResponseFromJSON,
    PricelistGetPricesResponseToJSON,
    PricelistListFullPriceItemsRequestFromJSON,
    PricelistListFullPriceItemsRequestToJSON,
    PricelistListFullPriceItemsResponseFromJSON,
    PricelistListFullPriceItemsResponseToJSON,
    PricelistListPriceListsRequestFromJSON,
    PricelistListPriceListsRequestToJSON,
    PricelistListPriceListsResponseFromJSON,
    PricelistListPriceListsResponseToJSON,
    PricelistSetPriceListItemsRequestFromJSON,
    PricelistSetPriceListItemsRequestToJSON,
    PricelistSetPriceListItemsResponseFromJSON,
    PricelistSetPriceListItemsResponseToJSON,
    PricelistUpdatePriceListRequestFromJSON,
    PricelistUpdatePriceListRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface CreatePriceListRequest {
    body: PricelistCreatePriceListRequest;
}

export interface DeletePriceListItemsRequest {
    body: PricelistDeletePriceListItemsRequest;
}

export interface GetFullPriceItemsByPricelistIdRequest {
    body: PricelistGetFullPriceItemsRequest;
}

export interface GetPriceListRequest {
    body: PricelistGetPriceListRequest;
}

export interface GetPriceListByCodeRequest {
    body: PricelistGetPriceListByCodeRequest;
}

export interface GetPriceListItemsRequest {
    body: PricelistGetPriceListItemsRequest;
}

export interface GetPricesItemsRequest {
    body: PricelistGetPricesRequest;
}

export interface ListFullPriceItemsByPricelistIdRequest {
    body: PricelistListFullPriceItemsRequest;
}

export interface ListPriceListsRequest {
    body: PricelistListPriceListsRequest;
}

export interface PriceListGetPriceItemsByPriceListItemIdsRequest {
    body: PricelistGetPriceItemsByPriceListItemIdsRequest;
}

export interface SetPriceListItemsRequest {
    body: PricelistSetPriceListItemsRequest;
}

export interface UpdatePriceListRequest {
    body: PricelistUpdatePriceListRequest;
}

/**
 * 
 */
export class PriceListApi extends runtime.BaseAPI {

    /**
     * Allows the creation of a new price list with specified details such as code, name, currency, and type.
     * Create new list
     */
    async createPriceListRaw(requestParameters: CreatePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistCreatePriceListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/CreatePriceList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistCreatePriceListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistCreatePriceListResponseFromJSON(jsonValue));
    }

    /**
     * Allows the creation of a new price list with specified details such as code, name, currency, and type.
     * Create new list
     */
    async createPriceList(requestParameters: CreatePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistCreatePriceListResponse> {
        const response = await this.createPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes specified items from a price list based on their unique identifiers.
     * Get prices for items
     */
    async deletePriceListItemsRaw(requestParameters: DeletePriceListItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deletePriceListItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/DeletePriceListItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistDeletePriceListItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes specified items from a price list based on their unique identifiers.
     * Get prices for items
     */
    async deletePriceListItems(requestParameters: DeletePriceListItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deletePriceListItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches detailed information about items, including historical price data, for a specific price list.
     * List detailed items
     */
    async getFullPriceItemsByPricelistIdRaw(requestParameters: GetFullPriceItemsByPricelistIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistGetFullPriceItemsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getFullPriceItemsByPricelistId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/GetFullPriceItemsByPricelistId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistGetFullPriceItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistGetFullPriceItemsResponseFromJSON(jsonValue));
    }

    /**
     * Fetches detailed information about items, including historical price data, for a specific price list.
     * List detailed items
     */
    async getFullPriceItemsByPricelistId(requestParameters: GetFullPriceItemsByPricelistIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistGetFullPriceItemsResponse> {
        const response = await this.getFullPriceItemsByPricelistIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
     * Get specific list
     */
    async getPriceListRaw(requestParameters: GetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistGetPriceListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getPriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/GetPriceList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistGetPriceListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistGetPriceListResponseFromJSON(jsonValue));
    }

    /**
     * Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
     * Get specific list
     */
    async getPriceList(requestParameters: GetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistGetPriceListResponse> {
        const response = await this.getPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
     * Get list by code
     */
    async getPriceListByCodeRaw(requestParameters: GetPriceListByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistGetPriceListByCodeResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getPriceListByCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/GetPriceListByCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistGetPriceListByCodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistGetPriceListByCodeResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
     * Get list by code
     */
    async getPriceListByCode(requestParameters: GetPriceListByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistGetPriceListByCodeResponse> {
        const response = await this.getPriceListByCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a paginated list of items associated with a particular price list.
     * Get items in list
     */
    async getPriceListItemsRaw(requestParameters: GetPriceListItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistGetPriceListItemsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getPriceListItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/GetPriceListItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistGetPriceListItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistGetPriceListItemsResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a paginated list of items associated with a particular price list.
     * Get items in list
     */
    async getPriceListItems(requestParameters: GetPriceListItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistGetPriceListItemsResponse> {
        const response = await this.getPriceListItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the current prices of specified items considering the provided context, such as currency and market.
     * Get detailed items
     */
    async getPricesItemsRaw(requestParameters: GetPricesItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistGetPricesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getPricesItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/GetPricesItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistGetPricesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistGetPricesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the current prices of specified items considering the provided context, such as currency and market.
     * Get detailed items
     */
    async getPricesItems(requestParameters: GetPricesItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistGetPricesResponse> {
        const response = await this.getPricesItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
     * List detailed price items for a specific price list
     */
    async listFullPriceItemsByPricelistIdRaw(requestParameters: ListFullPriceItemsByPricelistIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistListFullPriceItemsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listFullPriceItemsByPricelistId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/ListFullPriceItemsByPricelistId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistListFullPriceItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistListFullPriceItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
     * List detailed price items for a specific price list
     */
    async listFullPriceItemsByPricelistId(requestParameters: ListFullPriceItemsByPricelistIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistListFullPriceItemsResponse> {
        const response = await this.listFullPriceItemsByPricelistIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
     * List all price lists
     */
    async listPriceListsRaw(requestParameters: ListPriceListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistListPriceListsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listPriceLists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/ListPriceLists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistListPriceListsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistListPriceListsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
     * List all price lists
     */
    async listPriceLists(requestParameters: ListPriceListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistListPriceListsResponse> {
        const response = await this.listPriceListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async priceListGetPriceItemsByPriceListItemIdsRaw(requestParameters: PriceListGetPriceItemsByPriceListItemIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling priceListGetPriceItemsByPriceListItemIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/GetPriceItemsByPriceListItemIds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistGetPriceItemsByPriceListItemIdsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistGetPriceItemsByPriceListItemIdsResponseFromJSON(jsonValue));
    }

    /**
     */
    async priceListGetPriceItemsByPriceListItemIds(requestParameters: PriceListGetPriceItemsByPriceListItemIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistGetPriceItemsByPriceListItemIdsResponse> {
        const response = await this.priceListGetPriceItemsByPriceListItemIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates or creates items for a given price list, allowing bulk modifications.
     * Set items in list
     */
    async setPriceListItemsRaw(requestParameters: SetPriceListItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricelistSetPriceListItemsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setPriceListItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/SetPriceListItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistSetPriceListItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricelistSetPriceListItemsResponseFromJSON(jsonValue));
    }

    /**
     * Updates or creates items for a given price list, allowing bulk modifications.
     * Set items in list
     */
    async setPriceListItems(requestParameters: SetPriceListItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricelistSetPriceListItemsResponse> {
        const response = await this.setPriceListItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: `code,name,currency,type`
     * Update list
     */
    async updatePriceListRaw(requestParameters: UpdatePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/pricelist.PriceList/UpdatePriceList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricelistUpdatePriceListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: `code,name,currency,type`
     * Update list
     */
    async updatePriceList(requestParameters: UpdatePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updatePriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
